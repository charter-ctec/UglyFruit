/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author speterma
 */
import java.awt.Color;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSetMetaData;
//import java.sql.DatabaseMetaData;
import javax.swing.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class ufQryForm extends javax.swing.JFrame {
    String mode="Table";
    /**
     * Creates new form ufQryForm
     */
    public ufQryForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblSQLDBFile = new javax.swing.JLabel();
        jBtnSaveQry = new javax.swing.JButton();
        jBTblSchema = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        
        
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuOpenDB = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UF Query");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("Run Qry");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Load Qry");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("SQLite3 DB Flie ->");

        lblSQLDBFile.setText("Not Set");

        jBtnSaveQry.setText("Save Qry");
        jBtnSaveQry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnSaveQryMouseClicked(evt);
            }
        });

        jBTblSchema.setText("Tbl Schema");
        jBTblSchema.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBTblSchemaMouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jScrollPane3.setViewportView(jTable1);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Text");
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Table");
        
        JLabel lblDataViewAs = new JLabel("Data View As");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jRadioButton1)
        				.addComponent(jRadioButton2)
        				.addComponent(lblDataViewAs, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addComponent(lblDataViewAs)
        			.addGap(7)
        			.addComponent(jRadioButton2)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(jRadioButton1)
        			.addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel1.setLayout(jPanel1Layout);

        jLabel2.setText("Tables");

        jMenu1.setText("File");

        jMenuOpenDB.setText("Open DB");
        jMenuOpenDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenDBActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOpenDB);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(20)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        					.addComponent(jButton2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(jButton1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(jBtnSaveQry, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(8)
        					.addComponent(jLabel1))
        				.addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 123, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jBTblSchema, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 509, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 436, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 509, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblSQLDBFile, GroupLayout.PREFERRED_SIZE, 497, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(39)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jButton2)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(jBtnSaveQry)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(jButton1)
        					.addGap(82)
        					.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(jLabel2)
        					.addGap(2)
        					.addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 98, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jBTblSchema))
        			.addGap(24)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel1)
        				.addComponent(lblSQLDBFile))
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);
        
        // http://www.java2s.com/Tutorial/Java/0240__Swing/Allowonlysingleaselection.htm
        table = new JTable();
        table.setTableHeader(null);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setModel(new DefaultTableModel(
        	new Object[][] {
        	},
        	new String[] {
        		"Tables", "Hidden"
        	}
        ) {
        	Class[] columnTypes = new Class[] {
        		String.class, Object.class
        	};
        	public Class getColumnClass(int columnIndex) {
        		return columnTypes[columnIndex];
        	}
        });
        
        jScrollPane4.setViewportView(table);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        
        // Run Query Here
        if (mode.equals("Table")) {
            loadTable();
        }
        else {
            selectAll();
        }
        
        //jTextArea1.append("Hello!\n");
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // File chooser procedure - get Sql query - dump to jTextArea1
        
        String filedump = "";
        
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
              System.out.println(file.getAbsolutePath()) ;
              //Open File here - assign contents to jTextArea1.setText()
              filedump = readfilereturntext(file.getAbsolutePath());
              //System.out.print(filedump);
              //jTextArea1.setText("SELECT * from tblinv");
              jTextArea1.setText(filedump);
              

            } catch (Exception ex) {
              System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuOpenDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenDBActionPerformed
        // OpenDB File Chooser to select SQLite DB file to open:
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
              System.out.println(file.getAbsolutePath()) ;
              
              //Open File here - assign contents to jTextArea1.setText()
              lblSQLDBFile.setOpaque(true);
              lblSQLDBFile.setBackground(Color.WHITE);
              lblSQLDBFile.setText(file.getAbsolutePath());
              
              // update table list after db found
              DefaultTableModel model = new DefaultTableModel();
              ArrayList<String> alrow = new ArrayList<String>();
              //model.setColumnIdentifiers(alColumns.toArray());
              
              model = (DefaultTableModel) table.getModel();
              //empty all rows for new table list
             int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
              //table.setFillsViewportHeight(true);
              System.out.println("Column 0 Name: " + model.getColumnName(0));

              //From Original button
              String sql = "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;";
              String result = "";
              ArrayList<String> alColumns = new ArrayList<String>();
              try {
      		     Connection conn = connect();
                   Statement stmt  = conn.createStatement();
                   ResultSet rs    = stmt.executeQuery(sql);
      			 
                   ResultSetMetaData rsmd = rs.getMetaData();
                   Integer colcount = rsmd.getColumnCount();
       
                  // loop through the result set
                  while (rs.next()) {
                      result=result+rs.getString("name") + "\n";
                      ArrayList<String> item = new ArrayList<String>();
                      item.add(rs.getString("name"));
                      //Add to model/row
                      model.addRow(item.toArray());

                  }//end of while rs
                  
                  //jTextArea2.setText(result);
              } catch (SQLException e) {
                  System.out.println(e.getMessage());
              }
              
              //model.addRow(alrow.toArray());
              table.getColumnModel().getColumn(1).setMaxWidth(0);
              
              
            } catch (Exception ex) {
              System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jMenuOpenDBActionPerformed

    private void jBtnSaveQryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnSaveQryMouseClicked
        // TODO add your handling code here:
        // Prompt for file name
        String usrfile = JOptionPane.showInputDialog(this, "Save Query File Name?");
        // write query to file now (data, filetosave)
        writeUsingFileWriter(jTextArea1.getText(),usrfile);
        
    }//GEN-LAST:event_jBtnSaveQryMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "UglyFruit SQLite Query Tool!\nAuthor: Scott Peterman");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jBTblSchemaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBTblSchemaMouseClicked
        // Get pragma table schema here
                //String sql = "SELECT * from tblinv";
    	// New - test selected grid/table info
        //http://www.java2s.com/Tutorials/Java/Swing/JTable/Get_selected_value_from_JTable_in_Java.htm
        String selectedData = null;

        int[] selectedRow = table.getSelectedRows();
        int[] selectedColumns = table.getSelectedColumns();

        for (int i = 0; i < selectedRow.length; i++) {
          for (int j = 0; j < selectedColumns.length; j++) {
            selectedData = (String) table.getValueAt(selectedRow[i], selectedColumns[j]);
          }
        }
        System.out.println("Selected: " + selectedData);
        // end of grid test
    	
        //String tblname  = JOptionPane.showInputDialog(this, "Table Name for Schema Info?");;
        //String tblname  = JOptionPane.showInputDialog(this, selectedData);;
        String sql = "PRAGMA table_info("+ selectedData + ")";
        String result = "";
        ArrayList<String> alColumns = new ArrayList<String>();
        try (Connection conn = this.connect();
             Statement stmt  = conn.createStatement();
             ResultSet rs    = stmt.executeQuery(sql)){
             ResultSetMetaData rsmd = rs.getMetaData();
             Integer colcount = rsmd.getColumnCount();
             System.out.println("Extracting Column Names...");
             System.out.println("Numbers of columns in qry: " + colcount.toString());

             //build a list of column names - 
             for (int i = 1; i <= colcount; i++) {
                System.out.print("column MetaData --> ");
                System.out.print("column number: " + i + " Name: ");
      // get the column's name.
                System.out.println(rsmd.getColumnName(i));
                alColumns.add(rsmd.getColumnName(i));
             }//end of for
             
             // print column header - console only
            Iterator<String> itr = alColumns.iterator();
            System.out.print("|"); // Start the line with a | 
            while(itr.hasNext()){
                    System.out.print("|" + itr.next());
                }// end of itr while
                System.out.println("||");
               
            // loop through the result set
            while (rs.next()) {
                //result=result+rs.getString("DeviceName") + "   \t[" + rs.getString("RemoteIPAddress") +  "]\n";
                Iterator<String> itrrow = alColumns.iterator();
                System.out.print("|"); // Start the line with a |    
                result=result+"||";
                while(itrrow.hasNext()){
                    String item = "";
                    item = rs.getString(itrrow.next());
                    System.out.print("|" + item);
                    result = result +  "|" + item;
                }// end of itr while
                System.out.println("||"); // finishes the line with a CRLF       
                result = result + "||\n";
            }//end of while rs
            
            jTextArea2.setText(result);
            
            
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jBTblSchemaMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
       jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
       //Set view to default (jRB1 is table view, 2 is text)
       jRadioButton1.setSelected(true);
       
       

    }//GEN-LAST:event_formWindowActivated

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        // TODO add your handling code here:
        if (jRadioButton2.isSelected()){
            this.mode="Text";
            
        }
        else {
            this.mode="Table";
        }
        jTextArea2.setText("Mode Set To: " + mode);
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    /* My Code Here */
    public void loadTable(){
   
         //String sql = "SELECT * from tblinv";
        
        String sql = jTextArea1.getText();
        String result = "";
        ArrayList<String> alColumns = new ArrayList<String>();
        try (Connection colconn = this.connect();
             Statement stmt  = colconn.createStatement();
             ResultSet rs    = stmt.executeQuery(sql)){
             ResultSetMetaData rsmd = rs.getMetaData();
             Integer colcount = rsmd.getColumnCount();
             System.out.println("Extracting Column Names...");
             System.out.println("Numbers of columns in qry: " + colcount.toString());

             //build a list of column names - 
             for (int i = 1; i <= colcount; i++) {
                System.out.print("column MetaData --> ");
                System.out.print("column number: " + i + " Name: ");
      // get the column's name.
                System.out.println(rsmd.getColumnName(i));
                alColumns.add(rsmd.getColumnName(i));
                
             }//end of for

          //load column headers
          
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(alColumns.toArray());
            jTable1.setModel(model);
            jTable1.setFillsViewportHeight(true);
            
            //jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            
            
            //jTable1.doLayout();
            //model.addRow(new Object[]{"yes","no", "maybe", "maybenot"});
            
             // print column header - console only
            Iterator<String> itr = alColumns.iterator();
            System.out.print("|"); // Start the line with a | 
            while(itr.hasNext()){
                    System.out.print("|" + itr.next());
                }// end of itr while
            
            //Process the rows
            // loop through the result set
            while (rs.next()) {
                
                //result=result+rs.getString("DeviceName") + "   \t[" + rs.getString("RemoteIPAddress") +  "]\n";
                Iterator<String> itrrow = alColumns.iterator();
                System.out.print("|"); // Start the line with a |    
                result=result+"||";
                
                ArrayList<String> alWalkcolumn = new ArrayList<String>();
                String[] recstring;
                while(itrrow.hasNext()){
                    String item = "";
                    item = rs.getString(itrrow.next());
                    System.out.print("|" + item);
                    result = result +  "|" + item;
                    
                    // build an arraylist object to feed grid
                    alWalkcolumn.add(item);
                }// end of itr while
      
                // convert arraylist to array of strings - for table consumption
                recstring=alWalkcolumn.toArray(new String[alWalkcolumn.size()]);
                model.addRow(recstring);
                //jTable1.getColumnModel().getColumn(1).sizeWidthToFit();
                System.out.println("||"); // finishes the line with a CRLF       
                result = result + "||\n";
            }//end of while rs
            
        } // end of try
         catch (SQLException e) {
            System.out.println("DB Error submitting SQL Query\n");
            System.out.println(e.getMessage());
        }
        
    } // end of testablt
    
    private Connection connect() {
        // SQLite connection string
        String sqliteDBFile;
        sqliteDBFile= lblSQLDBFile.getText();
        String url = "jdbc:sqlite:" + sqliteDBFile;
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(url);
            System.out.println("Opening DB: " + lblSQLDBFile.getText());
            //jTextArea2.setText("Opening DB: " + lblSQLDBFile.getText());
            //jTextArea2.setText("connecting ... " + lblSQLDBFile.getText());
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
            System.out.println("Error connect() DB File:" + lblSQLDBFile.getText());
            jTextArea2.setText("Error connect() DB File:" + lblSQLDBFile.getText());
        }
        return conn;
    }
    
    
    public void selectAll(){
        //String sql = "SELECT * from tblinv";
        String sql = jTextArea1.getText();
        String result = "";
        ArrayList<String> alColumns = new ArrayList<String>();
        try (Connection conn = this.connect();
             Statement stmt  = conn.createStatement();
             ResultSet rs    = stmt.executeQuery(sql)){
             ResultSetMetaData rsmd = rs.getMetaData();
             Integer colcount = rsmd.getColumnCount();
             System.out.println("Extracting Column Names...");
             System.out.println("Numbers of columns in qry: " + colcount.toString());

             //build a list of column names - 
             for (int i = 1; i <= colcount; i++) {
                System.out.print("column MetaData --> ");
                System.out.print("column number: " + i + " Name: ");
      // get the column's name.
                System.out.println(rsmd.getColumnName(i));
                alColumns.add(rsmd.getColumnName(i));
             }//end of for
             
             // print column header - console only
            Iterator<String> itr = alColumns.iterator();
            System.out.print("|"); // Start the line with a | 
            while(itr.hasNext()){
                    System.out.print("|" + itr.next());
                }// end of itr while
                System.out.println("||");
               
            // loop through the result set
            while (rs.next()) {
                //result=result+rs.getString("DeviceName") + "   \t[" + rs.getString("RemoteIPAddress") +  "]\n";
                Iterator<String> itrrow = alColumns.iterator();
                System.out.print("|"); // Start the line with a |    
                result=result+"||";
                while(itrrow.hasNext()){
                    String item = "";
                    item = rs.getString(itrrow.next());
                    System.out.print("|" + item);
                    result = result +  "|" + item;
                }// end of itr while
                System.out.println("||"); // finishes the line with a CRLF       
                result = result + "||\n";
            }//end of while rs
            
            jTextArea2.setText(result);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    // End of My Code
    
    public String readfilereturntext(String fileFullPath) {

        // The name of the file to open.
        String fileName = fileFullPath;
        String resulttxt = "";
        // This will reference one line at a time
        String line = null;

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(fileName);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
                resulttxt = resulttxt + line + "\n";
            }   

            // Always close files.
            bufferedReader.close();         
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                fileName + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + fileName + "'");                  
            // Or we could just do this: 
            // ex.printStackTrace();
        }
        return resulttxt;
    } // end of readfile
    
    /* write file code */
    public void writeUsingFileWriter(String data, String myFile) {
        File file = new File(myFile);
        FileWriter fr = null;
        try {
            fr = new FileWriter(file);
            fr.write(data);
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            //close resources
            try {
                fr.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    /*end of write file code */   
    
    /**
     * @param args the command line arguments
     */
    // Begining of Main Looop
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ufQryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ufQryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ufQryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ufQryForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ufQryForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jBTblSchema;
    private javax.swing.JButton jBtnSaveQry;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuOpenDB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblSQLDBFile;
    private JTable table;
}
