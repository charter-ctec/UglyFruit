package ufdev2;



import javax.swing.JLabel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSetMetaData;
import java.sql.PreparedStatement;
import java.io.*;
import javax.swing.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GraphicsEnvironment;
import java.awt.Point;

public class UFDevMgr extends javax.swing.JFrame {

    /**
     * Creates new form UFDevMgr
     */
    public UFDevMgr() {
    	addWindowListener(new WindowAdapter() {
    		@Override
    		public void windowOpened(WindowEvent e) {
    	        Dimension windowSize = getSize();
	            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
	            Point centerPoint = ge.getCenterPoint();

	            int dx = centerPoint.x - windowSize.width / 2;
	            int dy = centerPoint.y - windowSize.height / 2;    
	            setLocation(dx, dy);
    		}
    	});
        initComponents();
    }

    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAdd = new javax.swing.JButton();
        jButtonAdd.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		if (lblLbdid.getText().equals("New") ) {
        			devadd();
        		}
        		else {
        			//clear the form, and set lblLbdid to "New"
        			clearForm();
        		}
        	}
        });
        jButtonDelete = new javax.swing.JButton();
        jButtonDelete.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		devdelete();
        	}
        });
        jButtonFind = new javax.swing.JButton();
        jButtonFind.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		//Do mouse db stuff here
        		//String devname = JOptionPane.showInputDialog(this, "Device Name?");
        		String devname = JOptionPane.showInputDialog("Enter Search Item");
        		selectAll(devname);
        	}
        });
        jTFDeviceName = new javax.swing.JTextField();
        jTFChassisID = new javax.swing.JTextField();
        jTFChassisSerialNumber = new javax.swing.JTextField();
        jTFRemoteIPAddress = new javax.swing.JTextField();
        jTFVendor = new javax.swing.JTextField();
        jTFIPVersion = new javax.swing.JTextField();
        jTFMachineType = new javax.swing.JTextField();
        jTFChassisName = new javax.swing.JTextField();
        jTFChassisVersion = new javax.swing.JTextField();
        jTFCLIAccess = new javax.swing.JTextField();
        jTFbgp = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAComments = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpenDB = new javax.swing.JMenuItem();
    	fileChooser = new javax.swing.JFileChooser();
       
        jMenuItemOpenDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jMenuOpenDBActionPerformed(evt);
            }
            private void jMenuOpenDBActionPerformed(java.awt.event.ActionEvent evt) {
            	//GEN-FIRST:event_jMenuOpenDBActionPerformed
                // OpenDB File Chooser to select SQLite DB file to open:
                int returnVal = fileChooser.showOpenDialog(null);
                File file = fileChooser.getSelectedFile();
                System.out.println(file.getAbsolutePath()) ;
                
                //Open File here - assign contents to jTextArea1.setText()
                lblSQLDBFile.setOpaque(true);
                lblSQLDBFile.setBackground(Color.WHITE);
                lblSQLDBFile.setText(file.getAbsolutePath());
            }
        });
        
        
        
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuOptions = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonAdd.setText("Add");

        jButtonDelete.setText("Delete");

        jButtonFind.setText("Find");

        jTFIPVersion.setText("IPVersion");

        jTFCLIAccess.setText("CLIAccess");

        jTFbgp.setText("BGP?");

        jTAComments.setColumns(20);
        jTAComments.setRows(5);
        jScrollPane1.setViewportView(jTAComments);

        jMenuFile.setText("File");

        jMenuItemOpenDB.setText("Open DB");
        jMenuFile.add(jMenuItemOpenDB);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuOptions.setText("Options");
        jMenuBar1.add(jMenuOptions);
        
        mntmSettings = new JMenuItem("Run CMD");
        mntmSettings.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		loadpickrun();
        	}
        });
        jMenuOptions.add(mntmSettings);

        setJMenuBar(jMenuBar1);
        
        JLabel lblDeviceName = new JLabel("Device Name");
        
        JLabel lblChassisId = new JLabel("Chassis ID");
        
        lblIpAddress = new JLabel("IP Address");
        
        lblComments = new JLabel("Comments");
        
        lblVendor = new JLabel("Vendor");
        
        lblChassisVersion = new JLabel("Chassis Version");
        
        lblAccess = new JLabel("Access");
        
        lblMachineType = new JLabel("Machine Type");
        
        lblChassisInfo = new JLabel("Chassis Info");
        
        JLabel lblDb = new JLabel("DB:");
        
        lblSQLDBFile = new JLabel("Not Set");
        lblSQLDBFile.setOpaque(true);
        lblSQLDBFile.setBackground(Color.WHITE);
        
        JLabel lblHasBgp = new JLabel("Has BGP?");
        
        lblIpVer = new JLabel("IP Ver");
        
        JButton btnSave = new JButton("Save");
        btnSave.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        	devupdate();
        		
        	}
        });
        
        lblLbdid = new JLabel("New");
        
        lblId_1 = new JLabel("ID:");
        
        lblChassisSerialNumber = new JLabel("Chassis Serial Number");
        
        JButton btnList = new JButton("List");
        btnList.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent arg0) {
        		loadpicker();
        	}
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(btnList, GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
        						.addComponent(jButtonFind, GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
        						.addComponent(jButtonAdd, GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
        						.addGroup(layout.createSequentialGroup()
        							.addGap(11)
        							.addComponent(lblId_1)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(lblLbdid))
        						.addComponent(btnSave, GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblComments)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 288, GroupLayout.PREFERRED_SIZE)
        								.addComponent(jTFDeviceName, GroupLayout.PREFERRED_SIZE, 261, GroupLayout.PREFERRED_SIZE)
        								.addComponent(jTFVendor, GroupLayout.PREFERRED_SIZE, 263, GroupLayout.PREFERRED_SIZE)
        								.addComponent(jTFRemoteIPAddress, GroupLayout.PREFERRED_SIZE, 261, GroupLayout.PREFERRED_SIZE)
        								.addComponent(lblDeviceName)
        								.addComponent(jTFChassisVersion, GroupLayout.PREFERRED_SIZE, 263, GroupLayout.PREFERRED_SIZE)
        								.addComponent(lblVendor)
        								.addComponent(lblChassisVersion)
        								.addGroup(layout.createSequentialGroup()
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(jTFCLIAccess, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
        										.addComponent(lblAccess))
        									.addGap(18)
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(lblIpVer)
        										.addComponent(jTFIPVersion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        									.addGap(18)
        									.addGroup(layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(lblHasBgp)
        										.addComponent(jTFbgp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        								.addComponent(lblIpAddress))
        							.addGap(2)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(lblChassisSerialNumber)
        								.addComponent(lblChassisInfo)
        								.addComponent(lblMachineType)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        									.addComponent(jTFChassisSerialNumber)
        									.addComponent(jTFMachineType)
        									.addComponent(jTFChassisName, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE))
        								.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        									.addGroup(layout.createSequentialGroup()
        										.addComponent(lblChassisId)
        										.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        										.addComponent(jButtonDelete, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE))
        									.addComponent(jTFChassisID, Alignment.LEADING, 237, 237, 237)))))
        					.addGap(14))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(lblDb)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(lblSQLDBFile, GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)))
        			.addGap(12))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(lblChassisId)
        				.addComponent(lblDeviceName)
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(lblLbdid)
        					.addComponent(lblId_1))
        				.addComponent(jButtonDelete))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(jButtonFind)
        					.addComponent(jTFDeviceName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(jTFChassisID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(32)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(lblIpAddress)
        						.addComponent(jButtonAdd)
        						.addComponent(lblChassisSerialNumber))
        					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jTFChassisSerialNumber, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jTFRemoteIPAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnList))))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(lblVendor)
        				.addComponent(lblMachineType))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jTFMachineType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jTFVendor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblChassisVersion)
        				.addComponent(lblChassisInfo))
        			.addGap(1)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jTFChassisName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jTFChassisVersion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnSave))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblAccess)
        				.addComponent(lblHasBgp)
        				.addComponent(lblIpVer))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jTFCLIAccess, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jTFIPVersion, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jTFbgp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(lblComments)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblDb)
        				.addComponent(lblSQLDBFile))
        			.addContainerGap(15, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);
        //Disable Frame Resize
        setResizable(false);
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    
    /* My Code Starts Here */
    private Connection connect() {
        // SQLite connection string
        String sqliteDBFile;
        sqliteDBFile= lblSQLDBFile.getText();
        //sqliteDBFile= "inv.sqlite";
        String url = "jdbc:sqlite:" + sqliteDBFile;
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(url);
            System.out.println("Opening DB: " + sqliteDBFile);
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
            System.out.println("Error connect() DB File:" + sqliteDBFile);
            
        }
        return conn;
    }
    
    public void selectAll(String devname){
    	//String devname = JOptionPane.showInputDialog(this, "Device Name?");
        //String sql = "SELECT * from tblinv where devicename like '%" + devname + "%'";
    	String sqlcount = "SELECT count() from tblinv where devicename like '%" + devname + "%'";
    	String sql = "SELECT rowid,* from tblinv where devicename like '%" + devname + "%'";
        //String sql = jTextArea1.getText();
        String result = "";
        String devname2;
        ArrayList<String> alColumns = new ArrayList<String>();
 
        try (Connection conn = this.connect()){
             Statement stmt  = conn.createStatement();
             ResultSet rs    = stmt.executeQuery(sqlcount);
             
             //if we get more than one row result, trap - this really needs to be a while type loop
             Integer rowcount = rs.getInt(1);
             
             if (rowcount > 1){
                 devname2 = JOptionPane.showInputDialog(this, "Multiple Matches (" + rowcount.toString() + ")... Enter Device Name?");
                 rs = stmt.executeQuery(sql);
             }
             else if (rowcount == 1) {
            	 System.out.println("Found Match for: " + devname);
            	 rs = stmt.executeQuery(sql);
             }
             else {
            	 devname2 = JOptionPane.showInputDialog(this, "No Matches (" + rowcount.toString() + ")... Enter Device Name?");
             }
             
             //populate form
             // Needs validation if columns do not exist (schema changes broke this)
             
             rs.next();
             System.out.println("Working Item: " + rs.getString("DeviceName"));
             lblLbdid.setText(rs.getString("rowid"));
             jTFDeviceName.setText(rs.getString("DeviceName"));
             jTFRemoteIPAddress.setText(rs.getString("RemoteIPAddress"));
             
             jTFCLIAccess.setText(rs.getString("CLIAccess"));
             jTFChassisID.setText(rs.getString("ChassisID"));
             jTFChassisName.setText(rs.getString("ChassisName"));
             jTFChassisSerialNumber.setText(rs.getString("ChassisSerialNumber"));
             jTFChassisVersion.setText(rs.getString("ChassisVersion"));
             jTFVendor.setText(rs.getString("Vendor"));
             jTFbgp.setText(rs.getString("BGP"));
             jTFMachineType.setText(rs.getString("MachineType"));
             jTAComments.setText(rs.getString("Comments"));
             jTFIPVersion.setText(rs.getString("IPVersion"));
             
             
             System.out.println("ROWID =" + rs.getString("rowid"));
 
             
             
             // Print Metadata
             ResultSetMetaData rsmd = rs.getMetaData();
             Integer colcount = rsmd.getColumnCount();
             System.out.println("Extracting Column Names...");
             System.out.println("Numbers of columns in qry: " + colcount.toString());

             //build a list of column names - 
             for (int i = 1; i <= colcount; i++) {
                System.out.print("column MetaData --> ");
                System.out.print("column number: " + i + " Name: ");
      // get the column's name.
                System.out.println(rsmd.getColumnName(i));
                alColumns.add(rsmd.getColumnName(i));
             }//end of for
             
 
            
            //Write out full result , update form etc
            //jTextArea2.setText(result);
            System.out.println("Done..");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    /* My Code Ends Here*/
    private void clearForm() {
        jTFDeviceName.setText("");
        jTFRemoteIPAddress.setText("");
        jTFCLIAccess.setText("Telnet");
        jTFChassisID.setText("");
        jTFChassisName.setText("");
        jTFChassisSerialNumber.setText("");
        jTFChassisVersion.setText("");
        jTFVendor.setText("");
        jTFbgp.setText("No");
        jTFMachineType.setText("");
        jTAComments.setText("");
        jTFIPVersion.setText("IPv4");
        //lblId.setText(rs.getString("rowid"));
        lblLbdid.setText("New");

    }
    private void devupdate() {
    	//Fires when save button clicked
        int result = JOptionPane.showConfirmDialog( null, "Save Changes?",
                "alert", JOptionPane.OK_CANCEL_OPTION);
    if (result ==0) {
        	
    	if (lblLbdid.getText().equals("New") ) {
			devadd();
		}
    	else {
    		//else - the form was already populated, save changes
    		
    			String sqlupdate = "UPDATE tblinv SET ChassisID = ?1, ChassisSerialNumber = ?2, DeviceName = ?3, Vendor = ?4, RemoteIPAddress = ?5, IPVersion = ?6, MachineType = ?7, ChassisName = ?8, ChassisVersion = ?9, CLIAccess = ?10, Comments = ?11, bgp = ?12 WHERE  rowid="+ lblLbdid.getText();
    			System.out.println("SQL Update:" + sqlupdate);
    	        try (Connection conn = this.connect();
    	            PreparedStatement pstmt = conn.prepareStatement(sqlupdate)) {
    
    	        	pstmt.setString(1,jTFChassisID.getText());
    	        	pstmt.setString(2,jTFChassisSerialNumber.getText());
    	        	pstmt.setString(3,jTFDeviceName.getText());
    	        	pstmt.setString(4,jTFVendor.getText());
    	        	pstmt.setString(5,jTFRemoteIPAddress.getText());
    	        	pstmt.setString(6,jTFIPVersion.getText());
    	        	pstmt.setString(7,jTFMachineType.getText());
    	        	pstmt.setString(8,jTFChassisName.getText());
    	        	pstmt.setString(9,jTFChassisVersion.getText());
    	        	pstmt.setString(10,jTFCLIAccess.getText());
    	        	pstmt.setString(11,jTAComments.getText());
    	        	pstmt.setString(12,jTFbgp.getText());
    	            // update 
    	        	//System.out.println(pstmt.get);
    	        	
    	        	
    	            pstmt.executeUpdate();
    	            //conn.commit(); throws error - auto commit on
    	        } catch (SQLException e) {
    	            System.out.println("DB Error: " + e.getMessage());
    	        }
    	    } //end of else  
        }
  	} //End of update()

    private void devadd() {
        
		String sqlupdate = "INSERT into tblinv (ChassisID,ChassisSerialNumber,DeviceName,Vendor,RemoteIPAddress,IPVersion,MachineType,ChassisName,ChassisVersion, CLIAccess,Comments,bgp) "
							+ "VALUES (?,?,?,?,?,?,?,?,?,?,?,?)"; // 1 through 12
		System.out.println("SQL Update:" + sqlupdate);
        try (Connection conn = this.connect();
            PreparedStatement pstmt = conn.prepareStatement(sqlupdate)) {

        	pstmt.setString(1,jTFChassisID.getText());
        	pstmt.setString(2,jTFChassisSerialNumber.getText());
        	pstmt.setString(3,jTFDeviceName.getText());
        	pstmt.setString(4,jTFVendor.getText());
        	pstmt.setString(5,jTFRemoteIPAddress.getText());
        	pstmt.setString(6,jTFIPVersion.getText());
        	pstmt.setString(7,jTFMachineType.getText());
        	pstmt.setString(8,jTFChassisName.getText());
        	pstmt.setString(9,jTFChassisVersion.getText());
        	pstmt.setString(10,jTFCLIAccess.getText());
        	pstmt.setString(11,jTAComments.getText());
        	pstmt.setString(12,jTFbgp.getText());
            // update 
            pstmt.executeUpdate();
            //conn.commit(); - throws error that auto commit is on
            selectAll(jTFDeviceName.getText());
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    } //End of update()
    
    public void devdelete() {
        String sql = "DELETE FROM tblinv WHERE rowid = ?";
        int result = JOptionPane.showConfirmDialog( null, "Ok to Delete Device?",
                "alert", JOptionPane.OK_CANCEL_OPTION);
        if (result ==0) {
        System.out.println("Picked:" + result);
        try (Connection conn = this.connect();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
 
            // set the corresponding param
            pstmt.setString(1, lblLbdid.getText());
            // execute the delete statement
            pstmt.executeUpdate();
            clearForm();
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
           }
        }// end of if result
    }
    
    private void loadpicker() {
    	
    	devPick pkr =  new devPick();
    	pkr.myparent = this;
    	pkr.start();
    	//pkr.setVisible(true);
    }
 //   public UFDevMgr getParent(){
 //   	return this;
 //   }
    private void loadpickrun() {
    	
    	jRun runner =  new jRun();
    	runner.myparent = this;
    	runner.start();
    	//runner.setVisible(true);
    }
    /**
     * 
@param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UFDevMgr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UFDevMgr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UFDevMgr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UFDevMgr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UFDevMgr().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonFind;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOpenDB;
    private javax.swing.JMenu jMenuOptions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAComments;
    protected javax.swing.JTextField jTFCLIAccess;
    private javax.swing.JTextField jTFChassisID;
    private javax.swing.JTextField jTFChassisName;
    private javax.swing.JTextField jTFChassisSerialNumber;
    private javax.swing.JTextField jTFChassisVersion;
    protected javax.swing.JTextField jTFDeviceName;
    private javax.swing.JTextField jTFIPVersion;
    protected javax.swing.JTextField jTFMachineType;
    protected javax.swing.JTextField jTFRemoteIPAddress;
    protected javax.swing.JTextField jTFVendor;
    private javax.swing.JTextField jTFbgp;
    private JLabel lblIpAddress;
    private JLabel lblComments;
    private JLabel lblVendor;
    private JLabel lblChassisVersion;
    private JLabel lblAccess;
    private JLabel lblMachineType;
    private JLabel lblChassisInfo;
    protected JLabel lblSQLDBFile;
    private javax.swing.JFileChooser fileChooser;
    private JLabel lblIpVer;
    protected JLabel lblLbdid;
    private JLabel lblId_1;
    private JLabel lblChassisSerialNumber;
    private JMenuItem mntmSettings;
}

